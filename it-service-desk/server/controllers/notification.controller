/**
 * IT Service Desk - Notification Controller
 * 
 * Контроллер для управления уведомлениями в системе.
 * Обрабатывает создание, получение, обновление и удаление уведомлений.
 */
const NotificationModel = require('../models/notification.model');
const UserModel = require('../models/user.model');
const NotificationService = require('../services/notification.service');
const WebSocketService = require('../services/websocket.service');
const EmailService = require('../services/email.service');
const { validationResult } = require('express-validator');
const mongoose = require('mongoose');

/**
 * Получение всех уведомлений для текущего пользователя
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next middleware function
 */
exports.getNotifications = async (req, res, next) => {
  try {
    const { limit = 20, offset = 0, unreadOnly = false, type } = req.query;
    const userId = req.user.id;

    // Формируем запрос
    const query = { recipient: userId };
    
    // Фильтр по типу уведомления, если указан
    if (type) {
      query.type = type;
    }
    
    // Фильтр по статусу, если нужны только непрочитанные
    if (unreadOnly === 'true') {
      query.status = 'UNREAD';
    }

    // Получаем уведомления с пагинацией и сортировкой по дате создания (новые сверху)
    const notifications = await NotificationModel.find(query)
      .sort({ createdAt: -1 })
      .skip(parseInt(offset))
      .limit(parseInt(limit))
      .populate('sender', 'firstName lastName email avatar')
      .lean();

    // Получаем общее количество уведомлений для пагинации
    const total = await NotificationModel.countDocuments(query);
    
    // Получаем количество непрочитанных уведомлений
    const unreadCount = await NotificationModel.countDocuments({ 
      recipient: userId, 
      status: 'UNREAD' 
    });

    res.status(200).json({
      success: true,
      data: {
        notifications,
        pagination: {
          total,
          unreadCount,
          limit: parseInt(limit),
          offset: parseInt(offset)
        }
      }
    });
  } catch (error) {
    next(error);
  }
};

/**
 * Получение уведомления по ID
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next middleware function
 */
exports.getNotificationById = async (req, res, next) => {
  try {
    const notificationId = req.params.id;
    const userId = req.user.id;

    if (!mongoose.Types.ObjectId.isValid(notificationId)) {
      return res.status(400).json({
        success: false,
        message: 'Invalid notification ID format'
      });
    }

    const notification = await NotificationModel.findById(notificationId)
      .populate('sender', 'firstName lastName email avatar');

    if (!notification) {
      return res.status(404).json({
        success: false,
        message: 'Notification not found'
      });
    }

    // Проверяем, принадлежит ли уведомление текущему пользователю
    if (notification.recipient.toString() !== userId) {
      return res.status(403).json({
        success: false,
        message: 'Access denied. This notification does not belong to you'
      });
    }

    res.status(200).json({
      success: true,
      data: notification
    });
  } catch (error) {
    next(error);
  }
};

/**
 * Создание нового уведомления
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next middleware function
 */
exports.createNotification = async (req, res, next) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    }

    const { 
      title, 
      message, 
      type, 
      priority = 'MEDIUM', 
      recipientId, 
      relatedEntity = null,
      link = null,
      deliveryMethod = 'IN_APP',
      actions = []
    } = req.body;

    // Проверяем существование получателя
    const recipient = await UserModel.findById(recipientId);
    if (!recipient) {
      return res.status(404).json({
        success: false,
        message: 'Recipient not found'
      });
    }

    // Создаем новое уведомление
    const notification = new NotificationModel({
      title,
      message,
      type,
      priority,
      recipient: recipientId,
      sender: req.user.id,
      isSystemGenerated: false,
      relatedEntity,
      link,
      deliveryMethod,
      actions
    });

    await notification.save();

    // Отправляем уведомление через WebSocket, если пользователь онлайн
    WebSocketService.sendToUser(recipientId, 'notification', {
      type: 'NEW_NOTIFICATION',
      data: notification
    });

    // Если выбрана доставка по email, отправляем email
    if (deliveryMethod === 'EMAIL' || deliveryMethod === 'IN_APP_AND_EMAIL') {
      await EmailService.sendNotificationEmail(recipient.email, {
        title,
        message,
        link
      });
      
      // Обновляем статус доставки
      notification.deliveryStatus = 'DELIVERED';
      await notification.save();
    }

    res.status(201).json({
      success: true,
      data: notification
    });
  } catch (error) {
    next(error);
  }
};

/**
 * Отметить уведомление как прочитанное
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next middleware function
 */
exports.markAsRead = async (req, res, next) => {
  try {
    const notificationId = req.params.id;
    const userId = req.user.id;

    if (!mongoose.Types.ObjectId.isValid(notificationId)) {
      return res.status(400).json({
        success: false,
        message: 'Invalid notification ID format'
      });
    }

    const notification = await NotificationModel.findById(notificationId);

    if (!notification) {
      return res.status(404).json({
        success: false,
        message: 'Notification not found'
      });
    }

    // Проверяем, принадлежит ли уведомление текущему пользователю
    if (notification.recipient.toString() !== userId) {
      return res.status(403).json({
        success: false,
        message: 'Access denied. This notification does not belong to you'
      });
    }

    // Если уведомление уже прочитано, возвращаем его без изменений
    if (notification.status === 'READ') {
      return res.status(200).json({
        success: true,
        data: notification,
        message: 'Notification already marked as read'
      });
    }

    // Обновляем статус и время прочтения
    notification.status = 'READ';
    notification.readAt = new Date();
    await notification.save();

    res.status(200).json({
      success: true,
      data: notification,
      message: 'Notification marked as read'
    });
  } catch (error) {
    next(error);
  }
};

/**
 * Отметить все уведомления пользователя как прочитанные
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next middleware function
 */
exports.markAllAsRead = async (req, res, next) => {
  try {
    const userId = req.user.id;
    const { type } = req.query;

    // Формируем запрос
    const query = { 
      recipient: userId,
      status: 'UNREAD'
    };

    // Если указан тип, добавляем его в запрос
    if (type) {
      query.type = type;
    }

    // Обновляем все непрочитанные уведомления
    const result = await NotificationModel.updateMany(
      query,
      { 
        status: 'READ',
        readAt: new Date()
      }
    );

    res.status(200).json({
      success: true,
      message: `${result.modifiedCount} notifications marked as read`,
      data: {
        modifiedCount: result.modifiedCount
      }
    });
  } catch (error) {
    next(error);
  }
};

/**
 * Архивировать уведомление
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next middleware function
 */
exports.archiveNotification = async (req, res, next) => {
  try {
    const notificationId = req.params.id;
    const userId = req.user.id;

    if (!mongoose.Types.ObjectId.isValid(notificationId)) {
      return res.status(400).json({
        success: false,
        message: 'Invalid notification ID format'
      });
    }

    const notification = await NotificationModel.findById(notificationId);

    if (!notification) {
      return res.status(404).json({
        success: false,
        message: 'Notification not found'
      });
    }

    // Проверяем, принадлежит ли уведомление текущему пользователю
    if (notification.recipient.toString() !== userId) {
      return res.status(403).json({
        success: false,
        message: 'Access denied. This notification does not belong to you'
      });
    }

    // Обновляем статус на архивный
    notification.status = 'ARCHIVED';
    await notification.save();

    res.status(200).json({
      success: true,
      data: notification,
      message: 'Notification archived'
    });
  } catch (error) {
    next(error);
  }
};

/**
 * Удалить уведомление
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next middleware function
 */
exports.deleteNotification = async (req, res, next) => {
  try {
    const notificationId = req.params.id;
    const userId = req.user.id;

    if (!mongoose.Types.ObjectId.isValid(notificationId)) {
      return res.status(400).json({
        success: false,
        message: 'Invalid notification ID format'
      });
    }

    const notification = await NotificationModel.findById(notificationId);

    if (!notification) {
      return res.status(404).json({
        success: false,
        message: 'Notification not found'
      });
    }

    // Проверяем, принадлежит ли уведомление текущему пользователю
    if (notification.recipient.toString() !== userId) {
      return res.status(403).json({
        success: false,
        message: 'Access denied. This notification does not belong to you'
      });
    }

    await notification.remove();

    res.status(200).json({
      success: true,
      message: 'Notification deleted successfully'
    });
  } catch (error) {
    next(error);
  }
};

/**
 * Получение количества непрочитанных уведомлений
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next middleware function
 */
exports.getUnreadCount = async (req, res, next) => {
  try {
    const userId = req.user.id;

    const unreadCount = await NotificationModel.countDocuments({
      recipient: userId,
      status: 'UNREAD'
    });

    res.status(200).json({
      success: true,
      data: {
        unreadCount
      }
    });
  } catch (error) {
    next(error);
  }
};

/**
 * Отправка системного уведомления
 * Используется внутренними сервисами для отправки уведомлений пользователям
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next middleware function
 */
exports.sendSystemNotification = async (req, res, next) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    }

    // Проверяем, что запрос идет от внутреннего сервиса
    // Это может быть API ключ или другой механизм аутентификации для внутренних сервисов
    if (!req.headers['x-api-key'] || req.headers['x-api-key'] !== process.env.INTERNAL_API_KEY) {
      return res.status(403).json({
        success: false,
        message: 'Access denied. Invalid API key'
      });
    }

    const { 
      title, 
      message, 
      type, 
      priority = 'MEDIUM', 
      recipientId, 
      relatedEntity = null,
      link = null,
      deliveryMethod = 'IN_APP',
      actions = []
    } = req.body;

    // Проверяем существование получателя
    const recipient = await UserModel.findById(recipientId);
    if (!recipient) {
      return res.status(404).json({
        success: false,
        message: 'Recipient not found'
      });
    }

    // Создаем новое системное уведомление
    const notification = new NotificationModel({
      title,
      message,
      type,
      priority,
      recipient: recipientId,
      isSystemGenerated: true,
      relatedEntity,
      link,
      deliveryMethod,
      actions
    });

    await notification.save();

    // Отправляем уведомление через WebSocket, если пользователь онлайн
    WebSocketService.sendToUser(recipientId, 'notification', {
      type: 'NEW_NOTIFICATION',
      data: notification
    });

    // Если выбрана доставка по email, отправляем email
    if (deliveryMethod === 'EMAIL' || deliveryMethod === 'IN_APP_AND_EMAIL') {
      await EmailService.sendNotificationEmail(recipient.email, {
        title,
        message,
        link
      });
      
      // Обновляем статус доставки
      notification.deliveryStatus = 'DELIVERED';
      await notification.save();
    }

    res.status(201).json({
      success: true,
      data: notification
    });
  } catch (error) {
    next(error);
  }
};

/**
 * Отправка массовых уведомлений группе пользователей
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next middleware function
 */
exports.sendBulkNotifications = async (req, res, next) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    }

    // Проверяем права доступа (только администраторы могут отправлять массовые уведомления)
    if (req.user.role !== 'ADMIN') {
      return res.status(403).json({
        success: false,
        message: 'Access denied. Only administrators can send bulk notifications'
      });
    }

    const { 
      title, 
      message, 
      type, 
      priority = 'MEDIUM',
      recipientIds, // массив ID пользователей
      recipientRole, // или роль для отправки всем пользователям с этой ролью
      relatedEntity = null,
      link = null,
      deliveryMethod = 'IN_APP',
      actions = []
    } = req.body;

    let recipients = [];

    // Если указаны конкретные получатели
    if (recipientIds && Array.isArray(recipientIds) && recipientIds.length > 0) {
      recipients = await UserModel.find({
        _id: { $in: recipientIds }
      }).select('_id email');
    } 
    // Если указана роль получателей
    else if (recipientRole) {
      recipients = await UserModel.find({
        role: recipientRole
      }).select('_id email');
    } else {
      return res.status(400).json({
        success: false,
        message: 'Either recipientIds or recipientRole must be provided'
      });
    }

    if (recipients.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'No recipients found'
      });
    }

    // Создаем уведомления для каждого получателя
    const notifications = [];
    const notificationPromises = recipients.map(async (recipient) => {
      const notification = new NotificationModel({
        title,
        message,
        type,
        priority,
        recipient: recipient._id,
        sender: req.user.id,
        isSystemGenerated: false,
        relatedEntity,
        link,
        deliveryMethod,
        actions
      });

      await notification.save();
      notifications.push(notification);

      // Отправляем уведомление через WebSocket
      WebSocketService.sendToUser(recipient._id.toString(), 'notification', {
        type: 'NEW_NOTIFICATION',
        data: notification
      });

      // Если выбрана доставка по email, отправляем email
      if (deliveryMethod === 'EMAIL' || deliveryMethod === 'IN_APP_AND_EMAIL') {
        await EmailService.sendNotificationEmail(recipient.email, {
          title,
          message,
          link
        });
      }
    });

    await Promise.all(notificationPromises);

    res.status(201).json({
      success: true,
      message: `Sent ${notifications.length} notifications successfully`,
      data: {
        count: notifications.length,
        recipients: recipients.length
      }
    });
  } catch (error) {
    next(error);
  }
};

/**
 * Получение настроек уведомлений пользователя
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next middleware function
 */
exports.getNotificationSettings = async (req, res, next) => {
  try {
    const userId = req.user.id;

    const user = await UserModel.findById(userId).select('notificationSettings');

    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    res.status(200).json({
      success: true,
      data: user.notificationSettings || {
        email: true,
        inApp: true,
        push: false
      }
    });
  } catch (error) {
    next(error);
  }
};

/**
 * Обновление настроек уведомлений пользователя
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next middleware function
 */
exports.updateNotificationSettings = async (req, res, next) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    }

    const userId = req.user.id;
    const { email, inApp, push } = req.body;

    const user = await UserModel.findById(userId);

    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    // Обновляем настройки уведомлений
    user.notificationSettings = {
      email: email !== undefined ? email : user.notificationSettings?.email || true,
      inApp: inApp !== undefined ? inApp : user.notificationSettings?.inApp || true,
      push: push !== undefined ? push : user.notificationSettings?.push || false
    };

    await user.save();

    res.status(200).json({
      success: true,
      data: user.notificationSettings,
      message: 'Notification settings updated successfully'
    });
  } catch (error) {
    next(error);
  }
};

module.exports = exports;
const mongoose = require('mongoose');
const config = require('../config/config');

/**
 * Role Schema
 * Defines the structure for role documents in the database
 * This model manages user roles and their associated permissions
 */
const roleSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'Role name is required'],
    unique: true,
    trim: true,
    uppercase: true,
    enum: Object.values(config.ROLES),
    maxlength: [50, 'Role name cannot exceed 50 characters']
  },
  description: {
    type: String,
    required: [true, 'Role description is required'],
    trim: true,
    maxlength: [200, 'Description cannot exceed 200 characters']
  },
  permissions: [{
    resource: {
      type: String,
      required: true,
      enum: ['INCIDENTS', 'EQUIPMENT', 'USERS', 'REPORTS', 'DASHBOARD', 'NOTIFICATIONS', 'SETTINGS'],
      trim: true
    },
    actions: [{
      type: String,
      required: true,
      enum: ['CREATE', 'READ', 'UPDATE', 'DELETE', 'EXPORT', 'IMPORT', 'ASSIGN', 'APPROVE'],
      trim: true
    }]
  }],
  isDefault: {
    type: Boolean,
    default: false
  },
  isActive: {
    type: Boolean,
    default: true
  },
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  updatedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  priority: {
    type: Number,
    default: 0,
    min: 0,
    max: 100
  }
}, {
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});

/**
 * Virtual for users with this role
 */
roleSchema.virtual('users', {
  ref: 'User',
  localField: 'name',
  foreignField: 'role'
});

/**
 * Indexes for optimizing queries
 */
roleSchema.index({ name: 1 }, { unique: true });
roleSchema.index({ isDefault: 1 });
roleSchema.index({ isActive: 1 });

/**
 * Static method to get the default role
 * @returns {Promise<Object>} Default role document
 */
roleSchema.statics.getDefaultRole = async function() {
  return this.findOne({ isDefault: true });
};

/**
 * Static method to get role by name
 * @param {string} roleName - The name of the role to find
 * @returns {Promise<Object>} Role document
 */
roleSchema.statics.findByName = async function(roleName) {
  return this.findOne({ name: roleName.toUpperCase() });
};

/**
 * Method to check if role has specific permission
 * @param {string} resource - The resource to check permission for
 * @param {string} action - The action to check permission for
 * @returns {boolean} True if role has permission, false otherwise
 */
roleSchema.methods.hasPermission = function(resource, action) {
  const permission = this.permissions.find(p => p.resource === resource);
  if (!permission) return false;
  return permission.actions.includes(action);
};

/**
 * Method to add permission to role
 * @param {string} resource - The resource to add permission for
 * @param {string} action - The action to add permission for
 * @returns {Object} Updated role document
 */
roleSchema.methods.addPermission = function(resource, action) {
  const permission = this.permissions.find(p => p.resource === resource);
  
  if (permission) {
    if (!permission.actions.includes(action)) {
      permission.actions.push(action);
    }
  } else {
    this.permissions.push({
      resource,
      actions: [action]
    });
  }
  
  return this;
};

/**
 * Method to remove permission from role
 * @param {string} resource - The resource to remove permission for
 * @param {string} action - The action to remove permission for
 * @returns {Object} Updated role document
 */
roleSchema.methods.removePermission = function(resource, action) {
  const permission = this.permissions.find(p => p.resource === resource);
  
  if (permission) {
    permission.actions = permission.actions.filter(a => a !== action);
    
    // Remove the resource if no actions remain
    if (permission.actions.length === 0) {
      this.permissions = this.permissions.filter(p => p.resource !== resource);
    }
  }
  
  return this;
};

/**
 * Method to clear all permissions for a resource
 * @param {string} resource - The resource to clear permissions for
 * @returns {Object} Updated role document
 */
roleSchema.methods.clearResourcePermissions = function(resource) {
  this.permissions = this.permissions.filter(p => p.resource !== resource);
  return this;
};

/**
 * Method to set multiple permissions at once
 * @param {Array} permissionsArray - Array of permission objects {resource, actions}
 * @returns {Object} Updated role document
 */
roleSchema.methods.setPermissions = function(permissionsArray) {
  if (!Array.isArray(permissionsArray)) {
    throw new Error('Permissions must be an array');
  }
  
  this.permissions = permissionsArray;
  return this;
};

/**
 * Pre-save middleware to ensure only one default role exists
 */
roleSchema.pre('save', async function(next) {
  // If this role is being set as default
  if (this.isDefault) {
    // Find any existing default roles and unset them
    await this.constructor.updateMany(
      { _id: { $ne: this._id }, isDefault: true },
      { $set: { isDefault: false } }
    );
  }
  
  // Ensure role name is uppercase
  if (this.name) {
    this.name = this.name.toUpperCase();
  }
  
  next();
});

/**
 * Post-save hook to handle any actions needed after role is saved
 */
roleSchema.post('save', function(doc, next) {
  // Log role changes or perform other actions if needed
  next();
});

/**
 * Static method to initialize default roles in the system
 * This method should be called during application bootstrap
 * @returns {Promise<Array>} Array of created default roles
 */
roleSchema.statics.initDefaultRoles = async function() {
  const defaultRoles = [
    {
      name: 'ADMIN',
      description: 'System administrator with full access to all features',
      isDefault: false,
      isActive: true,
      priority: 100,
      permissions: [
        {
          resource: 'INCIDENTS',
          actions: ['CREATE', 'READ', 'UPDATE', 'DELETE', 'EXPORT', 'IMPORT', 'ASSIGN', 'APPROVE']
        },
        {
          resource: 'EQUIPMENT',
          actions: ['CREATE', 'READ', 'UPDATE', 'DELETE', 'EXPORT', 'IMPORT', 'ASSIGN']
        },
        {
          resource: 'USERS',
          actions: ['CREATE', 'READ', 'UPDATE', 'DELETE', 'EXPORT', 'IMPORT']
        },
        {
          resource: 'REPORTS',
          actions: ['CREATE', 'READ', 'UPDATE', 'DELETE', 'EXPORT']
        },
        {
          resource: 'DASHBOARD',
          actions: ['READ']
        },
        {
          resource: 'NOTIFICATIONS',
          actions: ['CREATE', 'READ', 'UPDATE', 'DELETE']
        },
        {
          resource: 'SETTINGS',
          actions: ['READ', 'UPDATE']
        }
      ]
    },
    {
      name: 'TECHNICIAN',
      description: 'IT support technician with access to incidents and equipment',
      isDefault: true,
      isActive: true,
      priority: 50,
      permissions: [
        {
          resource: 'INCIDENTS',
          actions: ['CREATE', 'READ', 'UPDATE', 'ASSIGN']
        },
        {
          resource: 'EQUIPMENT',
          actions: ['CREATE', 'READ', 'UPDATE', 'ASSIGN']
        },
        {
          resource: 'REPORTS',
          actions: ['READ', 'EXPORT']
        },
        {
          resource: 'DASHBOARD',
          actions: ['READ']
        },
        {
          resource: 'NOTIFICATIONS',
          actions: ['READ']
        }
      ]
    },
    {
      name: 'USER',
      description: 'Regular user who can create and view their own incidents',
      isDefault: false,
      isActive: true,
      priority: 10,
      permissions: [
        {
          resource: 'INCIDENTS',
          actions: ['CREATE', 'READ']
        },
        {
          resource: 'EQUIPMENT',
          actions: ['READ']
        },
        {
          resource: 'NOTIFICATIONS',
          actions: ['READ']
        }
      ]
    }
  ];

  // Create or update each default role
  const results = [];
  for (const roleData of defaultRoles) {
    const existingRole = await this.findOne({ name: roleData.name });
    
    if (existingRole) {
      // Update existing role
      Object.assign(existingRole, roleData);
      results.push(await existingRole.save());
    } else {
      // Create new role
      results.push(await this.create(roleData));
    }
  }
  
  return results;
};

/**
 * Static method to get all active roles
 * @returns {Promise<Array>} Array of active role documents
 */
roleSchema.statics.getActiveRoles = async function() {
  return this.find({ isActive: true }).sort({ priority: -1 });
};

/**
 * Static method to get role permissions map
 * Returns a map of role names to their permissions for quick lookup
 * @returns {Promise<Object>} Map of role permissions
 */
roleSchema.statics.getPermissionsMap = async function() {
  const roles = await this.find({ isActive: true });
  const permissionsMap = {};
  
  roles.forEach(role => {
    permissionsMap[role.name] = {};
    
    role.permissions.forEach(permission => {
      permissionsMap[role.name][permission.resource] = permission.actions;
    });
  });
  
  return permissionsMap;
};

// Create and export the Role model
const Role = mongoose.model('Role', roleSchema);

module.exports = Role;
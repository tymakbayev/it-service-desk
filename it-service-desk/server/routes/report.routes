/**
 * IT Service Desk - Report Routes
 * 
 * This file defines all report-related routes for the application.
 * It handles report generation, scheduling, exporting, and other report operations.
 */
const express = require('express');
const router = express.Router();
const reportController = require('../controllers/report.controller');
const authMiddleware = require('../middleware/auth.middleware');
const roleMiddleware = require('../middleware/role.middleware');
const validationMiddleware = require('../middleware/validation.middleware');
const { check } = require('express-validator');

/**
 * @route   POST /api/reports/generate
 * @desc    Generate a report based on provided options
 * @access  Private (Admin, Manager)
 */
router.post('/generate',
  authMiddleware,
  roleMiddleware(['admin', 'manager']),
  [
    check('type', 'Report type is required').not().isEmpty(),
    check('format', 'Report format is required').not().isEmpty(),
    check('title', 'Report title is required').not().isEmpty(),
    check('filters', 'Filters must be an object').isObject()
  ],
  validationMiddleware,
  reportController.generateReport
);

/**
 * @route   GET /api/reports
 * @desc    Get all reports (with optional filters)
 * @access  Private (Admin, Manager)
 */
router.get('/',
  authMiddleware,
  roleMiddleware(['admin', 'manager']),
  reportController.getReports
);

/**
 * @route   GET /api/reports/:id
 * @desc    Get a specific report by ID
 * @access  Private (Admin, Manager)
 */
router.get('/:id',
  authMiddleware,
  roleMiddleware(['admin', 'manager']),
  reportController.getReportById
);

/**
 * @route   GET /api/reports/download/:id
 * @desc    Download a generated report file
 * @access  Private (Admin, Manager)
 */
router.get('/download/:id',
  authMiddleware,
  roleMiddleware(['admin', 'manager']),
  reportController.downloadReport
);

/**
 * @route   DELETE /api/reports/:id
 * @desc    Delete a report
 * @access  Private (Admin)
 */
router.delete('/:id',
  authMiddleware,
  roleMiddleware(['admin']),
  reportController.deleteReport
);

/**
 * @route   POST /api/reports/schedule
 * @desc    Schedule a recurring report
 * @access  Private (Admin)
 */
router.post('/schedule',
  authMiddleware,
  roleMiddleware(['admin']),
  [
    check('reportOptions', 'Report options are required').isObject(),
    check('reportOptions.type', 'Report type is required').not().isEmpty(),
    check('reportOptions.format', 'Report format is required').not().isEmpty(),
    check('reportOptions.title', 'Report title is required').not().isEmpty(),
    check('schedule', 'Schedule is required').isObject(),
    check('schedule.frequency', 'Frequency is required').isIn(['daily', 'weekly', 'monthly']),
    check('recipients', 'Recipients must be an array of emails').isArray()
  ],
  validationMiddleware,
  reportController.scheduleReport
);

/**
 * @route   PUT /api/reports/schedule/:id
 * @desc    Update a scheduled report
 * @access  Private (Admin)
 */
router.put('/schedule/:id',
  authMiddleware,
  roleMiddleware(['admin']),
  reportController.updateScheduledReport
);

/**
 * @route   DELETE /api/reports/schedule/:id
 * @desc    Delete a scheduled report
 * @access  Private (Admin)
 */
router.delete('/schedule/:id',
  authMiddleware,
  roleMiddleware(['admin']),
  reportController.deleteScheduledReport
);

/**
 * @route   GET /api/reports/types
 * @desc    Get available report types and formats
 * @access  Private
 */
router.get('/types',
  authMiddleware,
  reportController.getReportTypes
);

/**
 * @route   GET /api/reports/incidents
 * @desc    Generate a report specifically for incidents
 * @access  Private (Admin, Manager)
 */
router.get('/incidents',
  authMiddleware,
  roleMiddleware(['admin', 'manager']),
  reportController.generateIncidentReport
);

/**
 * @route   GET /api/reports/equipment
 * @desc    Generate a report specifically for equipment
 * @access  Private (Admin, Manager)
 */
router.get('/equipment',
  authMiddleware,
  roleMiddleware(['admin', 'manager']),
  reportController.generateEquipmentReport
);

/**
 * @route   GET /api/reports/users
 * @desc    Generate a report about users and their activities
 * @access  Private (Admin)
 */
router.get('/users',
  authMiddleware,
  roleMiddleware(['admin']),
  reportController.generateUserReport
);

/**
 * @route   GET /api/reports/performance
 * @desc    Generate a performance metrics report
 * @access  Private (Admin, Manager)
 */
router.get('/performance',
  authMiddleware,
  roleMiddleware(['admin', 'manager']),
  reportController.generatePerformanceReport
);

/**
 * @route   POST /api/reports/export
 * @desc    Export data in specified format (PDF, Excel, CSV)
 * @access  Private (Admin, Manager)
 */
router.post('/export',
  authMiddleware,
  roleMiddleware(['admin', 'manager']),
  [
    check('data', 'Data to export is required').isArray(),
    check('format', 'Export format is required').isIn(['pdf', 'excel', 'csv']),
    check('filename', 'Filename is required').not().isEmpty()
  ],
  validationMiddleware,
  reportController.exportData
);

/**
 * @route   GET /api/reports/templates
 * @desc    Get available report templates
 * @access  Private (Admin, Manager)
 */
router.get('/templates',
  authMiddleware,
  roleMiddleware(['admin', 'manager']),
  reportController.getReportTemplates
);

/**
 * @route   POST /api/reports/templates
 * @desc    Create a new report template
 * @access  Private (Admin)
 */
router.post('/templates',
  authMiddleware,
  roleMiddleware(['admin']),
  [
    check('name', 'Template name is required').not().isEmpty(),
    check('type', 'Report type is required').not().isEmpty(),
    check('format', 'Report format is required').not().isEmpty(),
    check('filters', 'Filters must be an object').isObject()
  ],
  validationMiddleware,
  reportController.createReportTemplate
);

/**
 * @route   DELETE /api/reports/templates/:id
 * @desc    Delete a report template
 * @access  Private (Admin)
 */
router.delete('/templates/:id',
  authMiddleware,
  roleMiddleware(['admin']),
  reportController.deleteReportTemplate
);

module.exports = router;
version: '3.8'

services:
  # MongoDB service
  mongodb:
    image: mongo:5.0
    container_name: it-service-desk-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE:-it_service_desk}
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/it_service_desk --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Redis for caching and session management
  redis:
    image: redis:7.0-alpine
    container_name: it-service-desk-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Node.js service
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: it-service-desk-backend
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${SERVER_PORT:-5000}
      MONGO_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME:-admin}:${MONGO_INITDB_ROOT_PASSWORD:-password}@mongodb:27017/${MONGO_INITDB_DATABASE:-it_service_desk}?authSource=admin
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key}
      JWT_EXPIRE: ${JWT_EXPIRE:-1d}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      EMAIL_HOST: ${EMAIL_HOST:-smtp.example.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USER: ${EMAIL_USER:-user@example.com}
      EMAIL_PASS: ${EMAIL_PASS:-email_password}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@itservicedesk.com}
      CLIENT_URL: ${CLIENT_URL:-http://localhost:3000}
    volumes:
      - ./server:/app
      - /app/node_modules
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "${SERVER_PORT:-5000}:5000"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend React service
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5000/api}
        REACT_APP_WS_URL: ${REACT_APP_WS_URL:-http://localhost:5000}
    container_name: it-service-desk-frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5000/api}
      REACT_APP_WS_URL: ${REACT_APP_WS_URL:-http://localhost:5000}
    volumes:
      - ./client:/app
      - /app/node_modules
      - /app/build
    ports:
      - "${CLIENT_PORT:-3000}:80"
    networks:
      - app-network

  # Nginx service for reverse proxy and static file serving
  nginx:
    image: nginx:1.23-alpine
    container_name: it-service-desk-nginx
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./client/build:/usr/share/nginx/html:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mailhog for email testing in development
  mailhog:
    image: mailhog/mailhog:latest
    container_name: it-service-desk-mailhog
    restart: unless-stopped
    ports:
      - "${MAILHOG_UI_PORT:-8025}:8025"
      - "${MAILHOG_SMTP_PORT:-1025}:1025"
    networks:
      - app-network
    profiles:
      - dev

  # MongoDB Express for database management in development
  mongo-express:
    image: mongo-express:latest
    container_name: it-service-desk-mongo-express
    restart: unless-stopped
    depends_on:
      - mongodb
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-password}
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USER:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD:-password}
    ports:
      - "${MONGO_EXPRESS_PORT:-8081}:8081"
    networks:
      - app-network
    profiles:
      - dev

  # Redis Commander for Redis management in development
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: it-service-desk-redis-commander
    restart: unless-stopped
    depends_on:
      - redis
    environment:
      REDIS_HOSTS: redis:redis:6379:0:${REDIS_PASSWORD:-redis_password}
      HTTP_USER: ${REDIS_COMMANDER_USER:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-password}
    ports:
      - "${REDIS_COMMANDER_PORT:-8082}:8081"
    networks:
      - app-network
    profiles:
      - dev

volumes:
  mongodb_data:
    name: it-service-desk-mongodb-data
  redis_data:
    name: it-service-desk-redis-data

networks:
  app-network:
    driver: bridge
    name: it-service-desk-network
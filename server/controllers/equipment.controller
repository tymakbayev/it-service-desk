const Equipment = require('../models/equipment.model');
const User = require('../models/user.model');
const Incident = require('../models/incident.model');
const { NotificationService } = require('../services/notification.service');
const mongoose = require('mongoose');
const { createPdf } = require('../utils/helpers');
const xlsx = require('xlsx');

/**
 * Controller for handling equipment-related operations
 */
class EquipmentController {
  /**
   * Create new equipment
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  async create(req, res) {
    try {
      const { name, type, serialNumber, purchaseDate, status, manufacturer, model, notes, location, warrantyExpiration } = req.body;
      
      // Validate required fields
      if (!name || !type || !serialNumber) {
        return res.status(400).json({ 
          success: false,
          message: 'Name, type and serial number are required' 
        });
      }
      
      // Check if equipment with same serial number already exists
      const existingEquipment = await Equipment.findOne({ serialNumber });
      if (existingEquipment) {
        return res.status(400).json({
          success: false,
          message: 'Equipment with this serial number already exists'
        });
      }
      
      const newEquipment = new Equipment({
        name,
        type,
        serialNumber,
        purchaseDate,
        status: status || 'available',
        manufacturer,
        model,
        notes,
        location,
        warrantyExpiration,
        createdBy: req.user.id,
        history: [{
          action: 'created',
          performedBy: req.user.id,
          timestamp: Date.now(),
          notes: 'Initial equipment creation'
        }]
      });
      
      await newEquipment.save();
      
      // Notify admins about new equipment
      NotificationService.notifyByRole('admin', {
        type: 'EQUIPMENT_ADDED',
        message: `New equipment added: ${name}`,
        data: { equipmentId: newEquipment._id }
      });
      
      return res.status(201).json({
        success: true,
        equipment: newEquipment
      });
    } catch (error) {
      console.error('Error creating equipment:', error);
      return res.status(500).json({
        success: false,
        message: 'Failed to create equipment',
        error: error.message
      });
    }
  }
  
  /**
   * Update existing equipment
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  async update(req, res) {
    try {
      const { id } = req.params;
      const updateData = req.body;
      
      // Validate ID format
      if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).json({
          success: false,
          message: 'Invalid equipment ID format'
        });
      }
      
      const equipment = await Equipment.findById(id);
      
      if (!equipment) {
        return res.status(404).json({
          success: false,
          message: 'Equipment not found'
        });
      }
      
      // Check if user has permission to update
      if (req.user.role !== 'admin' && req.user.role !== 'technician') {
        return res.status(403).json({
          success: false,
          message: 'Not authorized to update equipment'
        });
      }
      
      // Add history record for the update
      const historyEntry = {
        action: 'updated',
        performedBy: req.user.id,
        timestamp: Date.now(),
        notes: updateData.notes || 'Equipment details updated'
      };
      
      // If status changed, add specific note
      if (updateData.status && updateData.status !== equipment.status) {
        historyEntry.notes = `Status changed from ${equipment.status} to ${updateData.status}`;
      }
      
      // Add history entry to update data
      updateData.history = [...equipment.history, historyEntry];
      updateData.updatedAt = Date.now();
      
      const updatedEquipment = await Equipment.findByIdAndUpdate(
        id,
        updateData,
        { new: true, runValidators: true }
      ).populate('assignedTo', 'firstName lastName email');
      
      // If status changed, send notification
      if (updateData.status && updateData.status !== equipment.status) {
        NotificationService.notifyByRole(['admin', 'technician'], {
          type: 'EQUIPMENT_STATUS_CHANGED',
          message: `Equipment ${equipment.name} status changed to ${updateData.status}`,
          data: { equipmentId: id, oldStatus: equipment.status, newStatus: updateData.status }
        });
      }
      
      return res.status(200).json({
        success: true,
        equipment: updatedEquipment
      });
    } catch (error) {
      console.error('Error updating equipment:', error);
      return res.status(500).json({
        success: false,
        message: 'Failed to update equipment',
        error: error.message
      });
    }
  }
  
  /**
   * Get all equipment with optional filtering
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  async getAll(req, res) {
    try {
      const { 
        status, 
        type, 
        assignedTo, 
        manufacturer,
        location,
        search,
        page = 1, 
        limit = 10,
        sortBy = 'createdAt',
        sortOrder = 'desc'
      } = req.query;
      
      // Build filter object
      const filter = {};
      if (status) filter.status = status;
      if (type) filter.type = type;
      if (assignedTo) filter.assignedTo = assignedTo;
      if (manufacturer) filter.manufacturer = manufacturer;
      if (location) filter.location = location;
      
      // Add search functionality
      if (search) {
        filter.$or = [
          { name: { $regex: search, $options: 'i' } },
          { serialNumber: { $regex: search, $options: 'i' } },
          { model: { $regex: search, $options: 'i' } }
        ];
      }
      
      // Calculate pagination
      const skip = (parseInt(page) - 1) * parseInt(limit);
      
      // Determine sort direction
      const sortDirection = sortOrder === 'asc' ? 1 : -1;
      
      // Create sort object
      const sort = {};
      sort[sortBy] = sortDirection;
      
      const equipment = await Equipment.find(filter)
        .populate('assignedTo', 'firstName lastName email')
        .populate('createdBy', 'firstName lastName')
        .skip(skip)
        .limit(parseInt(limit))
        .sort(sort);
      
      const total = await Equipment.countDocuments(filter);
      
      return res.status(200).json({
        success: true,
        equipment,
        page: parseInt(page),
        limit: parseInt(limit),
        total
      });
    } catch (error) {
      console.error('Error fetching equipment:', error);
      return res.status(500).json({
        success: false,
        message: 'Failed to fetch equipment',
        error: error.message
      });
    }
  }
  
  /**
   * Get equipment by ID
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  async getById(req, res) {
    try {
      const { id } = req.params;
      
      // Validate ID format
      if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).json({
          success: false,
          message: 'Invalid equipment ID format'
        });
      }
      
      const equipment = await Equipment.findById(id)
        .populate('assignedTo', 'firstName lastName email department')
        .populate('createdBy', 'firstName lastName')
        .populate({
          path: 'history.performedBy',
          select: 'firstName lastName email'
        });
      
      if (!equipment) {
        return res.status(404).json({
          success: false,
          message: 'Equipment not found'
        });
      }
      
      return res.status(200).json({
        success: true,
        equipment
      });
    } catch (error) {
      console.error('Error fetching equipment details:', error);
      return res.status(500).json({
        success: false,
        message: 'Failed to fetch equipment details',
        error: error.message
      });
    }
  }
  
  /**
   * Delete equipment
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  async delete(req, res) {
    try {
      const { id } = req.params;
      
      // Validate ID format
      if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).json({
          success: false,
          message: 'Invalid equipment ID format'
        });
      }
      
      // Only admins can delete equipment
      if (req.user.role !== 'admin') {
        return res.status(403).json({
          success: false,
          message: 'Not authorized to delete equipment'
        });
      }
      
      // Check if equipment exists
      const equipment = await Equipment.findById(id);
      if (!equipment) {
        return res.status(404).json({
          success: false,
          message: 'Equipment not found'
        });
      }
      
      // Check if equipment is linked to any incidents
      const linkedIncidents = await Incident.find({ relatedEquipment: id });
      if (linkedIncidents.length > 0) {
        return res.status(400).json({
          success: false,
          message: 'Cannot delete equipment that is linked to incidents',
          linkedIncidents: linkedIncidents.map(inc => inc._id)
        });
      }
      
      await Equipment.findByIdAndDelete(id);
      
      // Notify admins about equipment deletion
      NotificationService.notifyByRole('admin', {
        type: 'EQUIPMENT_DELETED',
        message: `Equipment ${equipment.name} (${equipment.serialNumber}) has been deleted`,
        data: { equipmentName: equipment.name, serialNumber: equipment.serialNumber }
      });
      
      return res.status(200).json({
        success: true,
        message: 'Equipment deleted successfully'
      });
    } catch (error) {
      console.error('Error deleting equipment:', error);
      return res.status(500).json({
        success: false,
        message: 'Failed to delete equipment',
        error: error.message
      });
    }
  }
  
  /**
   * Assign equipment to a user
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  async assignToUser(req, res) {
    try {
      const { equipmentId } = req.params;
      const { userId, notes } = req.body;
      
      // Validate IDs format
      if (!mongoose.Types.ObjectId.isValid(equipmentId) || !mongoose.Types.ObjectId.isValid(userId)) {
        return res.status(400).json({
          success: false,
          message: 'Invalid ID format'
        });
      }
      
      // Check if equipment exists
      const equipment = await Equipment.findById(equipmentId);
      if (!equipment) {
        return res.status(404).json({
          success: false,
          message: 'Equipment not found'
        });
      }
      
      // Check if user exists
      const user = await User.findById(userId);
      if (!user) {
        return res.status(404).json({
          success: false,
          message: 'User not found'
        });
      }
      
      // Check if equipment is available
      if (equipment.status !== 'available' && equipment.status !== 'maintenance') {
        return res.status(400).json({
          success: false,
          message: `Equipment is currently ${equipment.status} and cannot be assigned`
        });
      }
      
      // Add history record for the assignment
      const historyEntry = {
        action: 'assigned',
        performedBy: req.user.id,
        timestamp: Date.now(),
        notes: notes || `Assigned to ${user.firstName} ${user.lastName}`
      };
      
      // Update equipment
      const updatedEquipment = await Equipment.findByIdAndUpdate(
        equipmentId,
        {
          assignedTo: userId,
          status: 'assigned',
          $push: { history: historyEntry },
          updatedAt: Date.now()
        },
        { new: true, runValidators: true }
      ).populate('assignedTo', 'firstName lastName email');
      
      // Notify user about equipment assignment
      NotificationService.notifyUser(userId, {
        type: 'EQUIPMENT_ASSIGNED',
        message: `Equipment ${equipment.name} has been assigned to you`,
        data: { equipmentId, equipmentName: equipment.name }
      });
      
      return res.status(200).json({
        success: true,
        equipment: updatedEquipment
      });
    } catch (error) {
      console.error('Error assigning equipment:', error);
      return res.status(500).json({
        success: false,
        message: 'Failed to assign equipment',
        error: error.message
      });
    }
  }
  
  /**
   * Unassign equipment from a user
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  async unassignFromUser(req, res) {
    try {
      const { equipmentId } = req.params;
      const { notes } = req.body;
      
      // Validate ID format
      if (!mongoose.Types.ObjectId.isValid(equipmentId)) {
        return res.status(400).json({
          success: false,
          message: 'Invalid equipment ID format'
        });
      }
      
      // Check if equipment exists
      const equipment = await Equipment.findById(equipmentId);
      if (!equipment) {
        return res.status(404).json({
          success: false,
          message: 'Equipment not found'
        });
      }
      
      // Check if equipment is assigned
      if (equipment.status !== 'assigned') {
        return res.status(400).json({
          success: false,
          message: 'Equipment is not currently assigned to anyone'
        });
      }
      
      const previousUser = equipment.assignedTo;
      
      // Add history record for the unassignment
      const historyEntry = {
        action: 'unassigned',
        performedBy: req.user.id,
        timestamp: Date.now(),
        notes: notes || 'Unassigned from user'
      };
      
      // Update equipment
      const updatedEquipment = await Equipment.findByIdAndUpdate(
        equipmentId,
        {
          assignedTo: null,
          status: 'available',
          $push: { history: historyEntry },
          updatedAt: Date.now()
        },
        { new: true, runValidators: true }
      );
      
      // Notify previous user about equipment unassignment
      if (previousUser) {
        NotificationService.notifyUser(previousUser, {
          type: 'EQUIPMENT_UNASSIGNED',
          message: `Equipment ${equipment.name} has been unassigned from you`,
          data: { equipmentId, equipmentName: equipment.name }
        });
      }
      
      return res.status(200).json({
        success: true,
        equipment: updatedEquipment
      });
    } catch (error) {
      console.error('Error unassigning equipment:', error);
      return res.status(500).json({
        success: false,
        message: 'Failed to unassign equipment',
        error: error.message
      });
    }
  }
  
  /**
   * Mark equipment as under maintenance
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  async markAsMaintenance(req, res) {
    try {
      const { equipmentId } = req.params;
      const { reason, estimatedReturnDate } = req.body;
      
      // Validate ID format
      if (!mongoose.Types.ObjectId.isValid(equipmentId)) {
        return res.status(400).json({
          success: false,
          message: 'Invalid equipment ID format'
        });
      }
      
      // Check if equipment exists
      const equipment = await Equipment.findById(equipmentId);
      if (!equipment) {
        return res.status(404).json({
          success: false,
          message: 'Equipment not found'
        });
      }
      
      // Check if user has permission
      if (req.user.role !== 'admin' && req.user.role !== 'technician') {
        return res.status(403).json({
          success: false,
          message: 'Not authorized to mark equipment for maintenance'
        });
      }
      
      // Add history record
      const historyEntry = {
        action: 'maintenance',
        performedBy: req.user.id,
        timestamp: Date.now(),
        notes: reason || 'Marked for maintenance'
      };
      
      // If equipment was assigned, store the user for later reassignment
      const previousUser = equipment.assignedTo;
      
      // Update equipment
      const updatedEquipment = await Equipment.findByIdAndUpdate(
        equipmentId,
        {
          status: 'maintenance',
          assignedTo: null,
          maintenanceInfo: {
            reason,
            startDate: Date.now(),
            estimatedReturnDate: estimatedReturnDate || null
          },
          $push: { history: historyEntry },
          updatedAt: Date.now()
        },
        { new: true, runValidators: true }
      );
      
      // Notify admins and technicians
      NotificationService.notifyByRole(['admin', 'technician'], {
        type: 'EQUIPMENT_MAINTENANCE',
        message: `Equipment ${equipment.name} marked for maintenance`,
        data: { 
          equipmentId, 
          equipmentName: equipment.name,
          reason,
          estimatedReturnDate
        }
      });
      
      // If equipment was assigned to someone, notify them
      if (previousUser) {
        NotificationService.notifyUser(previousUser, {
          type: 'EQUIPMENT_MAINTENANCE',
          message: `Equipment ${equipment.name} that was assigned to you has been marked for maintenance`,
          data: { equipmentId, equipmentName: equipment.name }
        });
      }
      
      return res.status(200).json({
        success: true,
        equipment: updatedEquipment
      });
    } catch (error) {
      console.error('Error marking equipment for maintenance:', error);
      return res.status(500).json({
        success: false,
        message: 'Failed to mark equipment for maintenance',
        error: error.message
      });
    }
  }
  
  /**
   * Mark equipment as available after maintenance
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  async markAsAvailable(req, res) {
    try {
      const { equipmentId } = req.params;
      const { notes } = req.body;
      
      // Validate ID format
      if (!mongoose.Types.ObjectId.isValid(equipmentId)) {
        return res.status(400).json({
          success: false,
          message: 'Invalid equipment ID format'
        });
      }
      
      // Check if equipment exists
      const equipment = await Equipment.findById(equipmentId);
      if (!equipment) {
        return res.status(404).json({
          success: false,
          message: 'Equipment not found'
        });
      }
      
      // Check if user has permission
      if (req.user.role !== 'admin' && req.user.role !== 'technician') {
        return res.status(403).json({
          success: false,
          message: 'Not authorized to change equipment status'
        });
      }
      
      // Add history record
      const historyEntry = {
        action: 'status_change',
        performedBy: req.user.id,
        timestamp: Date.now(),
        notes: notes || `Status changed from ${equipment.status} to available`
      };
      
      // Update equipment
      const updatedEquipment = await Equipment.findByIdAndUpdate(
        equipmentId,
        {
          status: 'available',
          maintenanceInfo: equipment.status === 'maintenance' ? {
            ...equipment.maintenanceInfo,
            endDate: Date.now(),
            completionNotes: notes
          } : equipment.maintenanceInfo,
          $push: { history: historyEntry },
          updatedAt: Date.now()
        },
        { new: true, runValidators: true }
      );
      
      // Notify admins and technicians
      NotificationService.notifyByRole(['admin', 'technician'], {
        type: 'EQUIPMENT_AVAILABLE',
        message: `Equipment ${equipment.name} is now available`,
        data: { equipmentId, equipmentName: equipment.name }
      });
      
      return res.status(200).json({
        success: true,
        equipment: updatedEquipment
      });
    } catch (error) {
      console.error('Error marking equipment as available:', error);
      return res.status(500).json({
        success: false,
        message: 'Failed to mark equipment as available',
        error: error.message
      });
    }
  }
  
  /**
   * Get equipment history
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  async getHistory(req, res) {
    try {
      const { equipmentId } = req.params;
      
      // Validate ID format
      if (!mongoose.Types.ObjectId.isValid(equipmentId)) {
        return res.status(400).json({
          success: false,
          message: 'Invalid equipment ID format'
        });
      }
      
      const equipment = await Equipment.findById(equipmentId)
        .populate({
          path: 'history.performedBy',
          select: 'firstName lastName email'
        });
      
      if (!equipment) {
        return res.status(404).json({
          success: false,
          message: 'Equipment not found'
        });
      }
      
      // Sort history by timestamp (newest first)
      const sortedHistory = [...equipment.history].sort((a, b) => b.timestamp - a.timestamp);
      
      return res.status(200).json({
        success: true,
        history: sortedHistory,
        equipmentId,
        equipmentName: equipment.name
      });
    } catch (error) {
      console.error('Error fetching equipment history:', error);
      return res.status(500).json({
        success: false,
        message: 'Failed to fetch equipment history',
        error: error.message
      });
    }
  }
  
  /**
   * Get equipment statistics
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  async getStatistics(req, res) {
    try {
      // Get counts by status
      const statusCounts = await Equipment.aggregate([
        {
          $group: {
            _id: '$status',
            count: { $sum: 1 }
          }
        }
      ]);
      
      // Get counts by type
      const typeCounts = await Equipment.aggregate([
        {
          $group: {
            _id: '$type',
            count: { $sum: 1 }
          }
        }
      ]);
      
      // Get counts by manufacturer
      const manufacturerCounts = await Equipment.aggregate([
        {
          $group: {
            _id: '$manufacturer',
            count: { $sum: 1 }
          }
        }
      ]);
      
      // Get total count
      const totalCount = await Equipment.countDocuments();
      
      // Get equipment needing maintenance (warranty expiring in next 30 days)
      const thirtyDaysFromNow = new Date();
      thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);
      
      const warrantyExpiringCount = await Equipment.countDocuments({
        warrantyExpiration: {
          $gte: new Date(),
          $lte: thirtyDaysFromNow
        }
      });
      
      return res.status(200).json({
        success: true,
        statistics: {
          total: totalCount,
          byStatus: statusCounts,
          byType: typeCounts,
          byManufacturer: manufacturerCounts,
          warrantyExpiringSoon: warrantyExpiringCount
        }
      });
    } catch (error) {
      console.error('Error fetching equipment statistics:', error);
      return res.status(500).json({
        success: false,
        message: 'Failed to fetch equipment statistics',
        error: error.message
      });
    }
  }
  
  /**
   * Export equipment list as PDF
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  async exportPdf(req, res) {
    try {
      const { status, type, assignedTo } = req.query;
      
      // Build filter object
      const filter = {};
      if (status) filter.status = status;
      if (type) filter.type = type;
      if (assignedTo) filter.assignedTo = assignedTo;
      
      const equipment = await Equipment.find(filter)
        .populate('assignedTo', 'firstName lastName email')
        .sort({ createdAt: -1 });
      
      // Format data for PDF
      const equipmentData = equipment.map(item => ({
        name: item.name,
        type: item.type,
        serialNumber: item.serialNumber,
        status: item.status,
        manufacturer: item.manufacturer || 'N/A',
        model: item.model || 'N/A',
        assignedTo: item.assignedTo ? `${item.assignedTo.firstName} ${item.assignedTo.lastName}` : 'Not Assigned',
        purchaseDate: item.purchaseDate ? new Date(item.purchaseDate).toLocaleDateString() : 'N/A',
        warrantyExpiration: item.warrantyExpiration ? new Date(item.warrantyExpiration).toLocaleDateString() : 'N/A'
      }));
      
      // Generate PDF
      const pdfBuffer = await createPdf('Equipment Inventory', equipmentData, [
        { header: 'Name', key: 'name' },
        { header: 'Type', key: 'type' },
        { header: 'Serial Number', key: 'serialNumber' },
        { header: 'Status', key: 'status' },
        { header: 'Manufacturer', key: 'manufacturer' },
        { header: 'Model', key: 'model' },
        { header: 'Assigned To', key: 'assignedTo' },
        { header: 'Purchase Date', key: 'purchaseDate' },
        { header: 'Warranty Expiration', key: 'warrantyExpiration' }
      ]);
      
      // Set response headers
      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', 'attachment; filename=equipment-inventory.pdf');
      
      // Send PDF
      return res.send(pdfBuffer);
    } catch (error) {
      console.error('Error exporting equipment as PDF:', error);
      return res.status(500).json({
        success: false,
        message: 'Failed to export equipment as PDF',
        error: error.message
      });
    }
  }
  
  /**
   * Export equipment list as Excel
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  async exportExcel(req, res) {
    try {
      const { status, type, assignedTo } = req.query;
      
      // Build filter object
      const filter = {};
      if (status) filter.status = status;
      if (type) filter.type = type;
      if (assignedTo) filter.assignedTo = assignedTo;
      
      const equipment = await Equipment.find(filter)
        .populate('assignedTo', 'firstName lastName email')
        .sort({ createdAt: -1 });
      
      // Format data for Excel
      const equipmentData = equipment.map(item => ({
        'Name': item.name,
        'Type': item.type,
        'Serial Number': item.serialNumber,
        'Status': item.status,
        'Manufacturer': item.manufacturer || 'N/A',
        'Model': item.model || 'N/A',
        'Assigned To': item.assignedTo ? `${item.assignedTo.firstName} ${item.assignedTo.lastName}` : 'Not Assigned',
        'Purchase Date': item.purchaseDate ? new Date(item.purchaseDate).toLocaleDateString() : 'N/A',
        'Warranty Expiration': item.warrantyExpiration ? new Date(item.warrantyExpiration).toLocaleDateString() : 'N/A',
        'Location': item.location || 'N/A',
        'Notes': item.notes || ''
      }));
      
      // Create workbook and worksheet
      const workbook = xlsx.utils.book_new();
      const worksheet = xlsx.utils.json_to_sheet(equipmentData);
      
      // Add worksheet to workbook
      xlsx.utils.book_append_sheet(workbook, worksheet, 'Equipment Inventory');
      
      // Generate buffer
      const excelBuffer = xlsx.write(workbook, { type: 'buffer', bookType: 'xlsx' });
      
      // Set response headers
      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
      res.setHeader('Content-Disposition', 'attachment; filename=equipment-inventory.xlsx');
      
      // Send Excel file
      return res.send(excelBuffer);
    } catch (error) {
      console.error('Error exporting equipment as Excel:', error);
      return res.status(500).json({
        success: false,
        message: 'Failed to export equipment as Excel',
        error: error.message
      });
    }
  }
  
  /**
   * Get equipment assigned to a specific user
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  async getByUser(req, res) {
    try {
      const { userId } = req.params;
      
      // Validate ID format
      if (!mongoose.Types.ObjectId.isValid(userId)) {
        return res.status(400).json({
          success: false,
          message: 'Invalid user ID format'
        });
      }
      
      // Check if user exists
      const user = await User.findById(userId);
      if (!user) {
        return res.status(404).json({
          success: false,
          message: 'User not found'
        });
      }
      
      // Get equipment assigned to user
      const equipment = await Equipment.find({ assignedTo: userId })
        .sort({ updatedAt: -1 });
      
      return res.status(200).json({
        success: true,
        equipment,
        count: equipment.length,
        user: {
          id: user._id,
          name: `${user.firstName} ${user.lastName}`,
          email: user.email
        }
      });
    } catch (error) {
      console.error('Error fetching user equipment:', error);
      return res.status(500).json({
        success: false,
        message: 'Failed to fetch user equipment',
        error: error.message
      });
    }
  }
}

module.exports = new EquipmentController();
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const config = require('../config/config');

/**
 * Report Schema
 * Defines the structure for storing report metadata and references
 */
const ReportSchema = new Schema({
  // Basic report information
  title: {
    type: String,
    required: [true, 'Report title is required'],
    trim: true
  },
  description: {
    type: String,
    trim: true
  },
  
  // Report type (incidents, equipment, users, performance)
  type: {
    type: String,
    required: [true, 'Report type is required'],
    enum: ['incidents', 'equipment', 'users', 'performance'],
    index: true
  },
  
  // Report format (pdf, excel, csv)
  format: {
    type: String,
    required: [true, 'Report format is required'],
    enum: ['pdf', 'excel', 'csv'],
    default: 'pdf'
  },
  
  // Filters applied to the report
  filters: {
    startDate: Date,
    endDate: Date,
    status: [String],
    priority: [String],
    assignedTo: [{ type: Schema.Types.ObjectId, ref: 'User' }],
    department: [String],
    equipmentType: [String],
    location: [String]
  },
  
  // Report generation options
  options: {
    includeCharts: {
      type: Boolean,
      default: true
    },
    groupBy: String,
    sortBy: String,
    limit: Number
  },
  
  // File information
  fileUrl: {
    type: String,
    required: [true, 'File URL is required']
  },
  fileName: {
    type: String,
    required: [true, 'File name is required']
  },
  filePath: {
    type: String,
    required: [true, 'File path is required']
  },
  fileSize: {
    type: Number,
    default: 0
  },
  
  // Report statistics
  statistics: {
    totalRecords: Number,
    byStatus: Schema.Types.Mixed,
    byPriority: Schema.Types.Mixed,
    byDepartment: Schema.Types.Mixed,
    byEquipmentType: Schema.Types.Mixed,
    averageResolutionTime: Number,
    otherMetrics: Schema.Types.Mixed
  },
  
  // Report scheduling information
  schedule: {
    isScheduled: {
      type: Boolean,
      default: false
    },
    frequency: {
      type: String,
      enum: ['daily', 'weekly', 'monthly', 'quarterly'],
    },
    nextRunDate: Date,
    recipients: [{
      email: String,
      name: String
    }]
  },
  
  // Metadata
  createdBy: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: [true, 'Report creator is required']
  },
  createdAt: {
    type: Date,
    default: Date.now,
    index: true
  },
  updatedAt: {
    type: Date,
    default: Date.now
  },
  expiresAt: {
    type: Date,
    default: function() {
      // Reports expire after 30 days by default, configurable in config
      const expirationDays = config.reports?.expirationDays || 30;
      const date = new Date();
      date.setDate(date.getDate() + expirationDays);
      return date;
    }
  }
}, {
  timestamps: true
});

// Indexes for common queries
ReportSchema.index({ createdBy: 1, type: 1, createdAt: -1 });
ReportSchema.index({ 'schedule.isScheduled': 1, 'schedule.nextRunDate': 1 }, { 
  sparse: true 
});

// Virtual for checking if report is expired
ReportSchema.virtual('isExpired').get(function() {
  return this.expiresAt < new Date();
});

// Pre-save middleware to update timestamps
ReportSchema.pre('save', function(next) {
  this.updatedAt = new Date();
  next();
});

// Method to generate report URL
ReportSchema.methods.getPublicUrl = function() {
  return `${config.baseUrl}/reports/download/${this._id}`;
};

// Method to extend report expiration
ReportSchema.methods.extendExpiration = function(days = 30) {
  const date = new Date();
  date.setDate(date.getDate() + days);
  this.expiresAt = date;
  return this.save();
};

// Static method to find reports by type
ReportSchema.statics.findByType = function(type) {
  return this.find({ type }).sort({ createdAt: -1 });
};

// Static method to find scheduled reports
ReportSchema.statics.findScheduled = function() {
  return this.find({ 
    'schedule.isScheduled': true,
    'schedule.nextRunDate': { $lte: new Date() }
  });
};

// Static method to clean up expired reports
ReportSchema.statics.cleanupExpired = async function() {
  const fs = require('fs').promises;
  const path = require('path');
  
  // Find all expired reports
  const expiredReports = await this.find({
    expiresAt: { $lt: new Date() }
  });
  
  // Delete files and records
  for (const report of expiredReports) {
    try {
      // Delete file if it exists
      if (report.filePath) {
        await fs.unlink(report.filePath).catch(err => {
          console.warn(`Could not delete file for report ${report._id}: ${err.message}`);
        });
      }
      
      // Delete the report record
      await report.remove();
      
      console.log(`Cleaned up expired report: ${report._id}`);
    } catch (error) {
      console.error(`Error cleaning up report ${report._id}:`, error);
    }
  }
  
  return expiredReports.length;
};

const Report = mongoose.model('Report', ReportSchema);

module.exports = Report;
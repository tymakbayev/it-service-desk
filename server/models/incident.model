const mongoose = require('mongoose');
const Schema = mongoose.Schema;

/**
 * Схема для комментариев к инцидентам
 */
const IncidentCommentSchema = new Schema({
  userId: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  text: {
    type: String,
    required: true,
    trim: true
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  },
  isInternal: {
    type: Boolean,
    default: false,
    description: 'Флаг, указывающий, виден ли комментарий только сотрудникам IT'
  }
});

/**
 * Схема для вложений к инцидентам
 */
const AttachmentSchema = new Schema({
  filename: {
    type: String,
    required: true
  },
  originalName: {
    type: String,
    required: true
  },
  path: {
    type: String,
    required: true
  },
  mimetype: {
    type: String,
    required: true
  },
  size: {
    type: Number,
    required: true
  },
  uploadedAt: {
    type: Date,
    default: Date.now
  },
  uploadedBy: {
    type: Schema.Types.ObjectId,
    ref: 'User'
  }
});

/**
 * Схема для истории изменений инцидента
 */
const IncidentHistorySchema = new Schema({
  userId: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  action: {
    type: String,
    required: true,
    enum: ['created', 'updated', 'status_changed', 'assigned', 'commented', 'attachment_added', 'attachment_removed']
  },
  timestamp: {
    type: Date,
    default: Date.now
  },
  details: {
    type: Object,
    default: {}
  }
});

/**
 * Основная схема инцидента
 */
const IncidentSchema = new Schema({
  title: {
    type: String,
    required: true,
    trim: true,
    minlength: 5,
    maxlength: 200
  },
  description: {
    type: String,
    required: true,
    trim: true,
    minlength: 10
  },
  status: {
    type: String,
    required: true,
    enum: ['new', 'assigned', 'in_progress', 'on_hold', 'resolved', 'closed', 'reopened'],
    default: 'new'
  },
  priority: {
    type: String,
    required: true,
    enum: ['low', 'medium', 'high', 'critical'],
    default: 'medium'
  },
  category: {
    type: String,
    required: true,
    enum: ['hardware', 'software', 'network', 'access', 'email', 'other'],
    default: 'other'
  },
  reporterId: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  assigneeId: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    default: null
  },
  equipmentId: {
    type: Schema.Types.ObjectId,
    ref: 'Equipment',
    default: null
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  },
  resolvedAt: {
    type: Date,
    default: null
  },
  closedAt: {
    type: Date,
    default: null
  },
  dueDate: {
    type: Date,
    default: null
  },
  comments: [IncidentCommentSchema],
  attachments: [AttachmentSchema],
  history: [IncidentHistorySchema],
  sla: {
    responseTime: {
      target: {
        type: Number,
        default: 24 // часы
      },
      actual: {
        type: Number,
        default: null
      },
      breached: {
        type: Boolean,
        default: false
      }
    },
    resolutionTime: {
      target: {
        type: Number,
        default: 72 // часы
      },
      actual: {
        type: Number,
        default: null
      },
      breached: {
        type: Boolean,
        default: false
      }
    }
  },
  tags: [{
    type: String,
    trim: true
  }],
  isDeleted: {
    type: Boolean,
    default: false
  }
});

/**
 * Индексы для оптимизации запросов
 */
IncidentSchema.index({ status: 1 });
IncidentSchema.index({ priority: 1 });
IncidentSchema.index({ category: 1 });
IncidentSchema.index({ reporterId: 1 });
IncidentSchema.index({ assigneeId: 1 });
IncidentSchema.index({ equipmentId: 1 });
IncidentSchema.index({ createdAt: -1 });
IncidentSchema.index({ title: 'text', description: 'text' });

/**
 * Виртуальное поле для расчета времени с момента создания
 */
IncidentSchema.virtual('age').get(function() {
  return Math.floor((Date.now() - this.createdAt) / (1000 * 60 * 60 * 24));
});

/**
 * Виртуальное поле для расчета времени разрешения
 */
IncidentSchema.virtual('resolutionTime').get(function() {
  if (!this.resolvedAt) return null;
  return Math.floor((this.resolvedAt - this.createdAt) / (1000 * 60 * 60));
});

/**
 * Middleware для автоматического обновления updatedAt
 */
IncidentSchema.pre('save', function(next) {
  this.updatedAt = new Date();
  next();
});

/**
 * Middleware для автоматического обновления истории при изменении статуса
 */
IncidentSchema.pre('save', function(next) {
  if (this.isModified('status')) {
    const statusChangeHistory = {
      userId: this.assigneeId || this.reporterId,
      action: 'status_changed',
      timestamp: new Date(),
      details: {
        oldStatus: this._original ? this._original.status : null,
        newStatus: this.status
      }
    };
    
    // Обновляем поля в зависимости от статуса
    if (this.status === 'resolved' && !this.resolvedAt) {
      this.resolvedAt = new Date();
      
      // Рассчитываем фактическое время разрешения для SLA
      const resolutionHours = Math.floor((this.resolvedAt - this.createdAt) / (1000 * 60 * 60));
      this.sla.resolutionTime.actual = resolutionHours;
      this.sla.resolutionTime.breached = resolutionHours > this.sla.resolutionTime.target;
    }
    
    if (this.status === 'closed' && !this.closedAt) {
      this.closedAt = new Date();
    }
    
    if (this.status === 'reopened') {
      this.resolvedAt = null;
      this.closedAt = null;
    }
    
    this.history.push(statusChangeHistory);
  }
  
  // Сохраняем оригинальное состояние для следующего сравнения
  this._original = this.toObject();
  
  next();
});

/**
 * Метод для добавления комментария
 */
IncidentSchema.methods.addComment = function(userId, text, isInternal = false) {
  const comment = {
    userId,
    text,
    isInternal,
    createdAt: new Date(),
    updatedAt: new Date()
  };
  
  this.comments.push(comment);
  
  // Добавляем запись в историю
  this.history.push({
    userId,
    action: 'commented',
    timestamp: new Date(),
    details: {
      commentId: comment._id
    }
  });
  
  return this.save();
};

/**
 * Метод для назначения инцидента специалисту
 */
IncidentSchema.methods.assignTo = function(assigneeId, assignedById) {
  const previousAssigneeId = this.assigneeId;
  this.assigneeId = assigneeId;
  
  if (this.status === 'new') {
    this.status = 'assigned';
  }
  
  // Добавляем запись в историю
  this.history.push({
    userId: assignedById,
    action: 'assigned',
    timestamp: new Date(),
    details: {
      previousAssigneeId,
      newAssigneeId: assigneeId
    }
  });
  
  // Если это первое назначение, обновляем SLA для времени ответа
  if (!previousAssigneeId && assigneeId) {
    const responseHours = Math.floor((Date.now() - this.createdAt) / (1000 * 60 * 60));
    this.sla.responseTime.actual = responseHours;
    this.sla.responseTime.breached = responseHours > this.sla.responseTime.target;
  }
  
  return this.save();
};

/**
 * Метод для изменения статуса инцидента
 */
IncidentSchema.methods.changeStatus = function(newStatus, userId) {
  const oldStatus = this.status;
  this.status = newStatus;
  
  // Обновляем соответствующие временные метки
  if (newStatus === 'resolved' && !this.resolvedAt) {
    this.resolvedAt = new Date();
  } else if (newStatus === 'closed' && !this.closedAt) {
    this.closedAt = new Date();
  } else if (newStatus === 'reopened') {
    this.resolvedAt = null;
    this.closedAt = null;
  }
  
  // Добавляем запись в историю
  this.history.push({
    userId,
    action: 'status_changed',
    timestamp: new Date(),
    details: {
      oldStatus,
      newStatus
    }
  });
  
  return this.save();
};

/**
 * Статический метод для поиска инцидентов с просроченным SLA
 */
IncidentSchema.statics.findBreachedSLA = function() {
  return this.find({
    $or: [
      { 'sla.responseTime.breached': true },
      { 'sla.resolutionTime.breached': true }
    ],
    status: { $nin: ['resolved', 'closed'] }
  });
};

/**
 * Статический метод для получения статистики по инцидентам
 */
IncidentSchema.statics.getStatistics = async function(startDate, endDate) {
  const match = {};
  if (startDate && endDate) {
    match.createdAt = {
      $gte: new Date(startDate),
      $lte: new Date(endDate)
    };
  }
  
  return this.aggregate([
    { $match: match },
    { $group: {
      _id: null,
      total: { $sum: 1 },
      resolved: { $sum: { $cond: [{ $eq: ['$status', 'resolved'] }, 1, 0] } },
      closed: { $sum: { $cond: [{ $eq: ['$status', 'closed'] }, 1, 0] } },
      open: { $sum: { $cond: [{ $in: ['$status', ['new', 'assigned', 'in_progress', 'on_hold', 'reopened']] }, 1, 0] } },
      avgResolutionTime: { $avg: { $cond: [{ $ne: ['$resolvedAt', null] }, { $divide: [{ $subtract: ['$resolvedAt', '$createdAt'] }, 3600000] }, null] } },
      slaBreached: { $sum: { $cond: [{ $or: [{ $eq: ['$sla.responseTime.breached', true] }, { $eq: ['$sla.resolutionTime.breached', true] }] }, 1, 0] } }
    }},
    { $project: {
      _id: 0,
      total: 1,
      resolved: 1,
      closed: 1,
      open: 1,
      avgResolutionTime: { $round: ['$avgResolutionTime', 2] },
      slaBreached: 1,
      slaCompliance: { 
        $round: [
          { $multiply: [
            { $divide: [
              { $subtract: ['$total', '$slaBreached'] },
              '$total'
            ] },
            100
          ] },
          2
        ] 
      }
    }}
  ]);
};

// Создаем и экспортируем модель
const IncidentModel = mongoose.model('Incident', IncidentSchema);
module.exports = IncidentModel;
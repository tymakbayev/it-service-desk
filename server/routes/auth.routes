const express = require('express');
const router = express.Router();
const authController = require('../controllers/auth.controller');
const authMiddleware = require('../middleware/auth.middleware');
const roleMiddleware = require('../middleware/role.middleware');
const validationMiddleware = require('../middleware/validation.middleware');
const { UserRole } = require('../utils/constants');

/**
 * @route POST /api/auth/register
 * @desc Register a new user
 * @access Public
 */
router.post('/register', 
  validationMiddleware.validateRegistration,
  authController.register
);

/**
 * @route POST /api/auth/login
 * @desc Authenticate user & get token
 * @access Public
 */
router.post('/login', 
  validationMiddleware.validateLogin,
  authController.login
);

/**
 * @route POST /api/auth/logout
 * @desc Logout user & invalidate token
 * @access Private
 */
router.post('/logout', 
  authMiddleware,
  authController.logout
);

/**
 * @route GET /api/auth/me
 * @desc Get current user info
 * @access Private
 */
router.get('/me', 
  authMiddleware,
  authController.getCurrentUser
);

/**
 * @route PUT /api/auth/me
 * @desc Update current user profile
 * @access Private
 */
router.put('/me', 
  authMiddleware,
  validationMiddleware.validateProfileUpdate,
  authController.updateProfile
);

/**
 * @route POST /api/auth/refresh-token
 * @desc Refresh access token using refresh token
 * @access Public
 */
router.post('/refresh-token', 
  authController.refreshToken
);

/**
 * @route POST /api/auth/forgot-password
 * @desc Send password reset email
 * @access Public
 */
router.post('/forgot-password', 
  validationMiddleware.validateEmail,
  authController.forgotPassword
);

/**
 * @route POST /api/auth/reset-password
 * @desc Reset password with token
 * @access Public
 */
router.post('/reset-password/:token', 
  validationMiddleware.validatePasswordReset,
  authController.resetPassword
);

/**
 * @route POST /api/auth/change-password
 * @desc Change password for logged in user
 * @access Private
 */
router.post('/change-password', 
  authMiddleware,
  validationMiddleware.validatePasswordChange,
  authController.changePassword
);

/**
 * @route GET /api/auth/users
 * @desc Get all users (admin only)
 * @access Private/Admin
 */
router.get('/users', 
  authMiddleware,
  roleMiddleware([UserRole.ADMIN]),
  authController.getAllUsers
);

/**
 * @route GET /api/auth/users/:id
 * @desc Get user by ID (admin only)
 * @access Private/Admin
 */
router.get('/users/:id', 
  authMiddleware,
  roleMiddleware([UserRole.ADMIN]),
  authController.getUserById
);

/**
 * @route PUT /api/auth/users/:id
 * @desc Update user (admin only)
 * @access Private/Admin
 */
router.put('/users/:id', 
  authMiddleware,
  roleMiddleware([UserRole.ADMIN]),
  validationMiddleware.validateUserUpdate,
  authController.updateUser
);

/**
 * @route DELETE /api/auth/users/:id
 * @desc Delete user (admin only)
 * @access Private/Admin
 */
router.delete('/users/:id', 
  authMiddleware,
  roleMiddleware([UserRole.ADMIN]),
  authController.deleteUser
);

/**
 * @route POST /api/auth/verify-token
 * @desc Verify if token is valid
 * @access Public
 */
router.post('/verify-token', 
  authController.verifyToken
);

/**
 * @route GET /api/auth/roles
 * @desc Get all available roles (admin only)
 * @access Private/Admin
 */
router.get('/roles', 
  authMiddleware,
  roleMiddleware([UserRole.ADMIN]),
  authController.getRoles
);

/**
 * @route POST /api/auth/roles
 * @desc Create a new role (admin only)
 * @access Private/Admin
 */
router.post('/roles', 
  authMiddleware,
  roleMiddleware([UserRole.ADMIN]),
  validationMiddleware.validateRole,
  authController.createRole
);

module.exports = router;